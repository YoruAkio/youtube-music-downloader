name: Build YouTube Music Downloader

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  generate-id:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.generate-id.outputs.id }}
    steps:
      - name: Generate random ID
        id: generate-id
        run: |
          TIMESTAMP=$(date +%s)
          RANDOM_SUFFIX=$((RANDOM % 10000))
          echo "id=${TIMESTAMP}-${RANDOM_SUFFIX}" >> $GITHUB_OUTPUT
          echo "Generated ID: ${TIMESTAMP}-${RANDOM_SUFFIX}"

  build:
    needs: generate-id
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Get architecture
      id: arch
      shell: bash
      run: |
        ARCH=$(uname -m)
        if [ "$ARCH" = "x86_64" ]; then
          echo "arch=x64" >> $GITHUB_OUTPUT
        elif [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
          echo "arch=arm64" >> $GITHUB_OUTPUT
        else
          echo "arch=$ARCH" >> $GITHUB_OUTPUT
        fi
    
    - name: Find certifi location
      id: certifi
      shell: bash
      run: |
        CERTIFI_PATH=$(python -c "import certifi; print(certifi.where())")
        echo "path=${CERTIFI_PATH}" >> $GITHUB_OUTPUT
        echo "Certifi path: ${CERTIFI_PATH}"
        
    - name: Build with PyInstaller (Windows)
      if: matrix.platform == 'windows'
      run: |
        pyinstaller --onefile --name youtube-music-downloader --add-data="youtube_downloader;youtube_downloader" --add-data="${{ steps.certifi.outputs.path }};." main.py
        
    - name: Build with PyInstaller (Linux/MacOS)
      if: matrix.platform != 'windows'
      run: |
        pyinstaller --onefile --name youtube-music-downloader --add-data="youtube_downloader:youtube_downloader" --add-data="${{ steps.certifi.outputs.path }}:." main.py
        
    - name: Prepare distribution folder
      shell: bash
      run: |
        mkdir -p "dist/${{ matrix.platform }}-${{ steps.arch.outputs.arch }}-youtube-music-downloader"
        if [ "${{ matrix.platform }}" = "windows" ]; then
          cp dist/youtube-music-downloader.exe "dist/${{ matrix.platform }}-${{ steps.arch.outputs.arch }}-youtube-music-downloader/"
          cp README.md LICENSE requirements.txt "dist/${{ matrix.platform }}-${{ steps.arch.outputs.arch }}-youtube-music-downloader/"
        else
          cp dist/youtube-music-downloader "dist/${{ matrix.platform }}-${{ steps.arch.outputs.arch }}-youtube-music-downloader/"
          cp README.md LICENSE requirements.txt "dist/${{ matrix.platform }}-${{ steps.arch.outputs.arch }}-youtube-music-downloader/"
          chmod +x "dist/${{ matrix.platform }}-${{ steps.arch.outputs.arch }}-youtube-music-downloader/youtube-music-downloader"
        fi
        
    - name: Create ZIP archive
      shell: bash
      run: |
        cd dist
        if [ "${{ matrix.platform }}" = "windows" ]; then
          powershell Compress-Archive -Path "${{ matrix.platform }}-${{ steps.arch.outputs.arch }}-youtube-music-downloader" -DestinationPath "${{ matrix.platform }}-${{ steps.arch.outputs.arch }}-youtube-music-downloader.zip"
        else
          zip -r "${{ matrix.platform }}-${{ steps.arch.outputs.arch }}-youtube-music-downloader.zip" "${{ matrix.platform }}-${{ steps.arch.outputs.arch }}-youtube-music-downloader"
        fi
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-${{ steps.arch.outputs.arch }}-youtube-music-downloader
        path: dist/${{ matrix.platform }}-${{ steps.arch.outputs.arch }}-youtube-music-downloader.zip
        
  release:
    needs: [build, generate-id]
    runs-on: ubuntu-latest
    if: always() && !failure() && !cancelled()
    permissions:
      contents: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: List downloaded artifacts
      run: ls -R
      
    - name: Create release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        name: YouTube Music Downloader v${{ needs.generate-id.outputs.release_id }}
        tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('release-{0}', needs.generate-id.outputs.release_id) }}
        draft: false
        prerelease: false
        files: |
          *-youtube-music-downloader/*.zip
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 